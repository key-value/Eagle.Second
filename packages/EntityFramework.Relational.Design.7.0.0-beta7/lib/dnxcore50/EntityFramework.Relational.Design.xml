<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntityFramework.Relational.Design</name>
    </assembly>
    <members>
        <member name="P:Microsoft.Data.Entity.Relational.Design.Strings.ConnectionStringRequired">
            <summary>
            ConnectionString is required to generate code.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Relational.Design.Strings.ErrorRunningDbContextTemplate(System.Object)">
            <summary>
            There was an error running the DbContext template. Message: {errorMessage}
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Relational.Design.Strings.ErrorRunningEntityTypeTemplate(System.Object)">
            <summary>
            There was an error running the EntityType template. Message: {errorMessage}
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Relational.Design.Strings.NamespaceRequired">
            <summary>
            Namespace is required to generate code.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Relational.Design.Strings.OutputPathRequired">
            <summary>
            OutputPath is required to generate code.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Entity.Relational.Design.Strings.ProviderRequired">
            <summary>
            Provider is required to generate code.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Relational.Design.Strings.ProviderReturnedNullModel(System.Object,System.Object)">
            <summary>
            Metadata model returned should not be null. Provider: {providerTypeName} , connection string: {connectionString}.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Relational.Design.Strings.ReadOnlyFiles(System.Object,System.Object)">
            <summary>
            No files generated in directory {outputDirectoryName}. The following file(s) already exist and must be made writeable to continue: {readOnlyFiles}.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Relational.Design.Strings.TemplateProcessingFailed(System.Object)">
            <summary>
            Template Processing Failed: {errorMessages}
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Relational.Design.Strings.UnableToAddNavigationProperty(System.Object)">
            <summary>
            Unable to add a Navigation Property referencing type {referencedEntityTypeName} because of errors generating that EntityType.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Relational.Design.Strings.UnableToCreateMetadataReference(System.Object)">
            <summary>
            Unable to create metadata reference from name {metadataReferenceName}.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Relational.Design.Strings.UnableToGenerateEntityType(System.Object,System.Object)">
            <summary>
            Unable to generate EntityType {entityTypeName}. {errorMessage}
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Relational.Design.Strings.UsingCustomTemplate(System.Object)">
            <summary>
            Using custom template {customTemplateFilePath}
            </summary>
        </member>
        <member name="T:Microsoft.Data.Entity.Relational.Design.ReverseEngineering.IFileService">
            <summary>
                Abstraction for outputting a 'file'. Normally this will be outputting a file to disk
                but this allows for other implementations which e.g. just output to memory.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Relational.Design.ReverseEngineering.IFileService.IsFileReadOnly(System.String,System.String)">
            <summary>
                Checks whether 'file' is read-only. Absence of the 'file' is interpreted as readable.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Entity.Relational.Design.ReverseEngineering.IFileService.OutputFile(System.String,System.String,System.String)">
            <summary>
                Creates, if necessary, a 'file' located within the given directory and with the given name.
                Ensures that the contents of the 'file' contain the given contents (overwriting if necessary).
            </summary>
            <returns>the full path of the output 'file'</returns>
        </member>
        <member name="M:Microsoft.Data.Entity.Relational.Design.ReverseEngineering.ReverseEngineeringMetadataModelProvider.ConstructRelationalModel(System.String)">
            <summary>
            Constructs an <see cref="T:Microsoft.Data.Entity.Metadata.IModel" /> directly representing the database consisting
            of <see cref="T:Microsoft.Data.Entity.Metadata.EntityType" />, <see cref="T:Microsoft.Data.Entity.Metadata.Property" />, <see cref="T:Microsoft.Data.Entity.Metadata.Key" /> and
            <see cref="T:Microsoft.Data.Entity.Metadata.ForeignKey" /> objects.
            This class expects that the EntityType will have the names of the underlying schema
            and table name as annotations on that EntityType. Similarly for the ColumnName annotation
            on each Property. The model does not contain <see cref="T:Microsoft.Data.Entity.Metadata.Navigation" /> objects as
            adding Navigations requires that the underlying EntityType have an underlying
            CLR type which is not possible here. Instead they will be constructed from the ForeignKeys.
            Errors generating EntityTypes can be attached to those EntityTypes using an
            annotation of name <see cref="F:Microsoft.Data.Entity.Relational.Design.ReverseEngineering.ReverseEngineeringMetadataModelProvider.AnnotationNameEntityTypeError"/>.
            Such EntityTypes will have files generated for them but the file will only contain
            the error message as a comment.
            </summary>
        </member>
    </members>
</doc>
